from aiogram.filters import Command, StateFilter
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import os
from yt_handler import download_video, logger, find_video_by_id

router = Router()

class DownloadStates(StatesGroup):
    waiting_for_url = State()

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

@router.message(Command('start'))
async def send_welcome(message: Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ (YouTube, –í–ö –∏ —Ç.–¥.)\n–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!',
        reply_markup=get_main_keyboard()
    )

@router.message(Command('download'))
async def cmd_download(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!', reply_markup=get_main_keyboard())
    await state.set_state(DownloadStates.waiting_for_url)

@router.message(F.text == 'üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ')
async def prompt_url(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!', reply_markup=get_main_keyboard())
    await state.set_state(DownloadStates.waiting_for_url)

@router.message(StateFilter(DownloadStates.waiting_for_url))
async def take_url(message: Message, state: FSMContext):
    url = message.text
    try:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, —É–∂–µ –∏—â—É –≤–∏–¥–µ–æ!", reply_markup=get_main_keyboard())
        
        video_info = download_video(url, output_path='videos')
        await message.answer('–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ, —Å–∫–æ—Ä–æ –æ—Ç–ø—Ä–∞–≤–ª—é!', reply_markup=get_main_keyboard())
        
        video_path = find_video_by_id(video_info['id'], output_path='videos')
        if video_path and os.path.exists(video_path):
            video = FSInputFile(video_path)
            await message.answer_video(video, caption='–ê –≤–æ—Ç –∏ –≤–∞—à–µ –≤–∏–¥–µ–æ!', reply_markup=get_main_keyboard())
            
            try:
                os.remove(video_path)
                logger.info(f"–§–∞–π–ª {video_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
            except FileNotFoundError:
                logger.error(f"–§–∞–π–ª {video_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            except PermissionError:
                logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {video_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {video_path}: {str(e)}")
        else:
            logger.error(f"Video file not found: {video_path}")
            await message.answer('–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! :(', reply_markup=get_main_keyboard())
            
            os.remove(video_path)
            logger.info(f"–§–∞–π–ª {video_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
        
        await state.clear()
    except Exception as e:
        logger.error(f"Error processing video: {str(e)}")
        await message.answer(f'–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ!', reply_markup=get_main_keyboard())
        
        os.remove(video_path)
        logger.info(f"–§–∞–π–ª {video_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
        
        await state.clear()